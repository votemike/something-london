{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["random","list","Math","floor","length","App","props","state","showResults","shortBlurb","className","longBlurb","blurb","drink","chooseDrink","eat","chooseEat","play","choosePlay","name","href","this","onClick","setState","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAmGA,SAASA,EAAOC,GACZ,OAAOA,EAAKC,KAAKC,MAAOD,KAAKF,SAASC,EAAKG,SAGhCC,M,YAnGb,WAAYC,GAAQ,IAAD,uBACjB,4CAAMA,KACDC,MAAQ,CACXC,aAAa,GAEf,IAAMC,EAAc,yBAAKC,UAAU,SAAf,8HACdC,EAAa,yBAAKD,UAAU,SAChC,wFAA6D,qCAA7D,eAAyF,2CAAzF,eAA2H,wCAA3H,gBAA2J,wCAA3J,MACA,kLARe,OAUjB,EAAKE,MAAQV,KAAKF,UAAY,GAAMS,EAAaE,EACjD,EAAKE,MAAQ,EAAKC,cAClB,EAAKC,IAAM,EAAKC,YAChB,EAAKC,KAAO,EAAKC,aAbA,E,2EA4BjB,OAAOlB,EAXQ,CACb,CAAEmB,KAAM,MAAOC,KAAM,oCACrB,CAAED,KAAM,mBAAoBC,KAAM,oCAClC,CAAED,KAAM,oBAAqBC,KAAM,6BACnC,CAAED,KAAM,UAAWC,KAAM,mCACzB,CAAED,KAAM,gCAAiCC,KAAM,uDAC/C,CAAED,KAAM,mBAAqBC,KAAM,iCACnC,CAAED,KAAM,aAAcC,KAAM,6BAC5B,CAAED,KAAM,KAAMC,KAAM,mC,kCAgBtB,OAAOpB,EATM,CACX,CAAEmB,KAAM,YAAaC,KAAM,qCAC3B,CAAED,KAAM,aAAcC,KAAM,yCAC5B,CAAED,KAAM,eAAgBC,KAAM,0CAC9B,CAAED,KAAM,YAAaC,KAAM,6BAC3B,CAAED,KAAM,YAAaC,KAAM,mDAC3B,CAAED,KAAM,UAAWC,KAAM,yC,mCAiB3B,OAAOpB,EAVO,CACZ,CAAEmB,KAAM,SAAUC,KAAM,mCACxB,CAAED,KAAM,cAAeC,KAAM,uCAC7B,CAAED,KAAM,oBAAqBC,KAAM,2CACnC,CAAED,KAAM,iBAAkBC,KAAM,kCAChC,CAAED,KAAM,SAAUC,KAAM,0BACxB,CAAED,KAAM,WAAYC,KAAM,iCAC1B,CAAED,KAAM,gBAAiBC,KAAM,qC,+BAMzB,IAAD,OACP,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAWW,KAAKd,MAAMC,YAAc,mBAAqB,aAC3Da,KAAKT,MACN,4BAAQU,QAAS,WACf,EAAKC,SAAS,CAAEf,aAAa,MAD/B,YAKF,yBAAKE,UAAWW,KAAKd,MAAMC,YAAc,aAAe,qBACtD,yBAAKE,UAAU,UACb,6BACE,qCAEF,uBAAGc,OAAO,SAASC,IAAI,sBAAsBL,KAAMC,KAAKJ,KAAKG,KAAMV,UAAU,aAAaW,KAAKJ,KAAKE,OAEtG,yBAAKT,UAAU,UACb,6BACE,oCAEF,uBAAGc,OAAO,SAASC,IAAI,sBAAsBL,KAAMC,KAAKN,IAAIK,KAAMV,UAAU,aAAaW,KAAKN,IAAII,OAEpG,yBAAKT,UAAU,UACb,6BACE,sCAEF,uBAAGc,OAAO,SAASC,IAAI,sBAAsBL,KAAMC,KAAKR,MAAMO,KAAMV,UAAU,aAAaW,KAAKR,MAAMM,c,GAvFlGO,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.2cf5ce78.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showResults: false\n    };\n    const shortBlurb = (<div className=\"blurb\">Can't decide what to do on your outing to London? Want to show a friend the quirkiest places in the city? Let us tell you.</div>);\n    const longBlurb = (<div className=\"blurb\">\n      <div>Having a night out in London and want to find somewhere <span>fun</span>? Somewhere <span>different</span>? Somewhere <span>unique</span>? Somewhere \"<span>London</span>\"?</div>\n      <div>Don't fret or spend hours researching, let us help you out with somewhere fun to play, somewhere delicious to eat and somewhere unique to drink.</div>\n    </div>);\n    this.blurb = Math.random() >= 0.5 ? shortBlurb : longBlurb;\n    this.drink = this.chooseDrink();\n    this.eat = this.chooseEat();\n    this.play = this.choosePlay();\n  }\n\n  chooseDrink() {\n    const drinks = [\n      { name: 'ABQ', href: 'https://abqlondon.com/abq-london' },\n      { name: 'Ballie Ballerson', href: 'https://www.ballieballerson.com/' },\n      { name: 'Bobby Fitzpatrick', href: 'https://www.bobbyf.co.uk/' },\n      { name: 'Cahoots', href: 'https://www.cahoots-london.com/' },\n      { name: 'Evans & Peel Detective Agency', href: 'http://www.evansandpeel.com/Appointments-Detectives' },\n      { name: 'Little Nan\\'s Bar', href: 'https://www.littlenans.co.uk/' },\n      { name: 'Sky Garden', href: 'https://skygarden.london/' },\n      { name: 'WC', href: 'http://www.wcclapham.co.uk/' }\n    ];\n\n    return random(drinks);\n  }\n\n  chooseEat() {\n    const eats = [\n      { name: 'Bel Canto', href: 'https://www.belcantolondon.co.uk/' },\n      { name: 'Bustronome', href: 'https://www.bustronome.com/en/london/' },\n      { name: 'Dans Le Noir', href: 'https://london.danslenoir.com/en/home/' },\n      { name: 'Hawksmoor', href: 'https://thehawksmoor.com/' },\n      { name: 'The Clink', href: 'https://theclinkcharity.org/restaurants/brixton' },\n      { name: 'The Jam', href: 'https://www.thejamrestaurant.com/' }\n    ];\n\n    return random(eats);\n  }\n\n  choosePlay() {\n    const plays = [\n      { name: 'Bounce', href: 'https://www.bouncepingpong.com/' },\n      { name: 'Flight Club', href: 'https://flightclubdarts.com/london/' },\n      { name: 'The Four Quarters', href: 'http://geocities.fourquartersbar.co.uk/' },\n      { name: 'London Shuffle', href: 'https://www.londonshuffle.com/' },\n      { name: 'Queens', href: 'https://queens.london/' },\n      { name: 'Swingers', href: 'https://swingersldn.com/home/' },\n      { name: 'Whistle Punks', href: 'https://www.whistlepunks.com/' }\n    ];\n\n    return random(plays);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className={this.state.showResults ? 'hidden row first' : 'row first'}>\n            {this.blurb}\n            <button onClick={() => {\n              this.setState({ showResults: true })\n            }}>Choose!\n            </button>\n          </div>\n          <div className={this.state.showResults ? 'row second' : 'hidden row second'}>\n            <div className=\"column\">\n              <div>\n                <h2>play</h2>\n              </div>\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.play.href} className=\"selection\">{this.play.name}</a>\n            </div>\n            <div className=\"column\">\n              <div>\n                <h2>eat</h2>\n              </div>\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.eat.href} className=\"selection\">{this.eat.name}</a>\n            </div>\n            <div className=\"column\">\n              <div>\n                <h2>drink</h2>\n              </div>\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.drink.href} className=\"selection\">{this.drink.name}</a>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nfunction random(list) {\n    return list[Math.floor((Math.random()*list.length))];\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}